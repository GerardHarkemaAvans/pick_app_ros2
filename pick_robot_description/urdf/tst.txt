<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from pick_robot.urdf.xacro          | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="pick_robot">
  <!--
    Base UR robot series xacro macro.

    NOTE this is NOT a URDF. It cannot directly be loaded by consumers
    expecting a flattened '.urdf' file. See the top-level '.xacro' for that
    (but note that .xacro must still be processed by the xacro command).

    This file models the base kinematic chain of a UR robot, which then gets
    parameterised by various configuration files to convert it into a UR3(e),
    UR5(e), UR10(e) or UR16e.

    NOTE the default kinematic parameters (i.e., link lengths, frame locations,
    offsets, etc) do not correspond to any particular robot. They are defaults
    only. There WILL be non-zero offsets between the Forward Kinematics results
    in TF (i.e., robot_state_publisher) and the values reported by the Teach
    Pendant.

    For accurate (and robot-specific) transforms, the 'kinematics_parameters_file'
    parameter MUST point to a .yaml file containing the appropriate values for
    the targeted robot.

    If using the UniversalRobots/Universal_Robots_ROS_Driver, follow the steps
    described in the readme of that repository to extract the kinematic
    calibration from the controller and generate the required .yaml file.

    Main author of the migration to yaml configs Ludovic Delval.

    Contributors to previous versions (in no particular order)

     - Denis Stogl
     - Lovro Ivanov
     - Felix Messmer
     - Kelsey Hawkins
     - Wim Meeussen
     - Shaun Edwards
     - Nadia Hammoudeh Garcia
     - Dave Hershberger
     - G. vd. Hoorn
     - Philip Long
     - Dave Coleman
     - Miguel Prada
     - Mathias Luedtke
     - Marcel Schnirring
     - Felix von Drigalski
     - Felix Exner
     - Jimmy Da Silva
     - Ajit Krisshna N L
     - Muhammad Asif Rana
  -->
  <!--
    NOTE the macro defined in this file is NOT part of the public API of this
          package. Users CANNOT rely on this file being available, or stored in
          this location. Nor can they rely on the existence of the macro.
  -->
  <!-- create link fixed to the "world" -->
  <link name="world"/>
  <ros2_control name="ur" type="system">
    <hardware>
      <plugin>ur_robot_driver/URPositionHardwareInterface</plugin>
      <param name="robot_ip">0.0.0.0</param>
      <param name="script_filename"></param>
      <param name="output_recipe_filename"></param>
      <param name="input_recipe_filename"></param>
      <param name="headless_mode">False</param>
      <param name="reverse_port">50001</param>
      <param name="script_sender_port">50002</param>
      <param name="reverse_ip">0.0.0.0</param>
      <param name="script_command_port">50004</param>
      <param name="trajectory_port">50003</param>
      <param name="tf_prefix"></param>
      <param name="non_blocking_read">False</param>
      <param name="servoj_gain">2000</param>
      <param name="servoj_lookahead_time">0.03</param>
      <param name="use_tool_communication">False</param>
      <param name="kinematics/hash">calib_12788084448423163542</param>
      <param name="tool_voltage">0</param>
      <param name="tool_parity">0</param>
      <param name="tool_baud_rate">115200</param>
      <param name="tool_stop_bits">1</param>
      <param name="tool_rx_idle_chars">1.5</param>
      <param name="tool_tx_idle_chars">3.5</param>
      <param name="tool_device_name">/tmp/ttyUR</param>
      <param name="tool_tcp_port">54321</param>
      <param name="keep_alive_count">2</param>
    </hardware>
    <joint name="shoulder_pan_joint">
      <command_interface name="position">
        <param name="min">{-2*pi}</param>
        <param name="max">{2*pi}</param>
      </command_interface>
      <command_interface name="velocity">
        <param name="min">-3.15</param>
        <param name="max">3.15</param>
      </command_interface>
      <state_interface name="position">
        <!-- initial position for the mock system and simulation -->
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="velocity">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="effort">
        <param name="initial_value">0.0</param>
      </state_interface>
    </joint>
    <joint name="shoulder_lift_joint">
      <command_interface name="position">
        <param name="min">{-2*pi}</param>
        <param name="max">{2*pi}</param>
      </command_interface>
      <command_interface name="velocity">
        <param name="min">-3.15</param>
        <param name="max">3.15</param>
      </command_interface>
      <state_interface name="position">
        <!-- initial position for the mock system and simulation -->
        <param name="initial_value">-1.57</param>
      </state_interface>
      <state_interface name="velocity">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="effort">
        <param name="initial_value">0.0</param>
      </state_interface>
    </joint>
    <joint name="elbow_joint">
      <command_interface name="position">
        <param name="min">{-pi}</param>
        <param name="max">{pi}</param>
      </command_interface>
      <command_interface name="velocity">
        <param name="min">-3.15</param>
        <param name="max">3.15</param>
      </command_interface>
      <state_interface name="position">
        <!-- initial position for the mock system and simulation -->
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="velocity">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="effort">
        <param name="initial_value">0.0</param>
      </state_interface>
    </joint>
    <joint name="wrist_1_joint">
      <command_interface name="position">
        <param name="min">{-2*pi}</param>
        <param name="max">{2*pi}</param>
      </command_interface>
      <command_interface name="velocity">
        <param name="min">-3.2</param>
        <param name="max">3.2</param>
      </command_interface>
      <state_interface name="position">
        <!-- initial position for the mock system and simulation -->
        <param name="initial_value">-1.57</param>
      </state_interface>
      <state_interface name="velocity">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="effort">
        <param name="initial_value">0.0</param>
      </state_interface>
    </joint>
    <joint name="wrist_2_joint">
      <command_interface name="position">
        <param name="min">{-2*pi}</param>
        <param name="max">{2*pi}</param>
      </command_interface>
      <command_interface name="velocity">
        <param name="min">-3.2</param>
        <param name="max">3.2</param>
      </command_interface>
      <state_interface name="position">
        <!-- initial position for the mock system and simulation -->
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="velocity">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="effort">
        <param name="initial_value">0.0</param>
      </state_interface>
    </joint>
    <joint name="wrist_3_joint">
      <command_interface name="position">
        <param name="min">{-2*pi}</param>
        <param name="max">{2*pi}</param>
      </command_interface>
      <command_interface name="velocity">
        <param name="min">-3.2</param>
        <param name="max">3.2</param>
      </command_interface>
      <state_interface name="position">
        <!-- initial position for the mock system and simulation -->
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="velocity">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="effort">
        <param name="initial_value">0.0</param>
      </state_interface>
    </joint>
    <sensor name="tcp_fts_sensor">
      <state_interface name="force.x"/>
      <state_interface name="force.y"/>
      <state_interface name="force.z"/>
      <state_interface name="torque.x"/>
      <state_interface name="torque.y"/>
      <state_interface name="torque.z"/>
    </sensor>
    <!-- NOTE The following are joints used only for testing with mock hardware and will change in the future -->
    <gpio name="speed_scaling">
      <state_interface name="speed_scaling_factor"/>
      <param name="initial_speed_scaling_factor">1</param>
      <command_interface name="target_speed_fraction_cmd"/>
      <command_interface name="target_speed_fraction_async_success"/>
    </gpio>
    <gpio name="gpio">
      <command_interface name="standard_digital_output_cmd_0"/>
      <command_interface name="standard_digital_output_cmd_1"/>
      <command_interface name="standard_digital_output_cmd_2"/>
      <command_interface name="standard_digital_output_cmd_3"/>
      <command_interface name="standard_digital_output_cmd_4"/>
      <command_interface name="standard_digital_output_cmd_5"/>
      <command_interface name="standard_digital_output_cmd_6"/>
      <command_interface name="standard_digital_output_cmd_7"/>
      <command_interface name="standard_digital_output_cmd_8"/>
      <command_interface name="standard_digital_output_cmd_9"/>
      <command_interface name="standard_digital_output_cmd_10"/>
      <command_interface name="standard_digital_output_cmd_11"/>
      <command_interface name="standard_digital_output_cmd_12"/>
      <command_interface name="standard_digital_output_cmd_13"/>
      <command_interface name="standard_digital_output_cmd_14"/>
      <command_interface name="standard_digital_output_cmd_15"/>
      <command_interface name="standard_digital_output_cmd_16"/>
      <command_interface name="standard_digital_output_cmd_17"/>
      <command_interface name="standard_analog_output_cmd_0"/>
      <command_interface name="standard_analog_output_cmd_1"/>
      <command_interface name="tool_voltage_cmd"/>
      <command_interface name="io_async_success"/>
      <state_interface name="digital_output_0"/>
      <state_interface name="digital_output_1"/>
      <state_interface name="digital_output_2"/>
      <state_interface name="digital_output_3"/>
      <state_interface name="digital_output_4"/>
      <state_interface name="digital_output_5"/>
      <state_interface name="digital_output_6"/>
      <state_interface name="digital_output_7"/>
      <state_interface name="digital_output_8"/>
      <state_interface name="digital_output_9"/>
      <state_interface name="digital_output_10"/>
      <state_interface name="digital_output_11"/>
      <state_interface name="digital_output_12"/>
      <state_interface name="digital_output_13"/>
      <state_interface name="digital_output_14"/>
      <state_interface name="digital_output_15"/>
      <state_interface name="digital_output_16"/>
      <state_interface name="digital_output_17"/>
      <state_interface name="digital_input_0"/>
      <state_interface name="digital_input_1"/>
      <state_interface name="digital_input_2"/>
      <state_interface name="digital_input_3"/>
      <state_interface name="digital_input_4"/>
      <state_interface name="digital_input_5"/>
      <state_interface name="digital_input_6"/>
      <state_interface name="digital_input_7"/>
      <state_interface name="digital_input_8"/>
      <state_interface name="digital_input_9"/>
      <state_interface name="digital_input_10"/>
      <state_interface name="digital_input_11"/>
      <state_interface name="digital_input_12"/>
      <state_interface name="digital_input_13"/>
      <state_interface name="digital_input_14"/>
      <state_interface name="digital_input_15"/>
      <state_interface name="digital_input_16"/>
      <state_interface name="digital_input_17"/>
      <state_interface name="standard_analog_output_0"/>
      <state_interface name="standard_analog_output_1"/>
      <state_interface name="standard_analog_input_0"/>
      <state_interface name="standard_analog_input_1"/>
      <state_interface name="analog_io_type_0"/>
      <state_interface name="analog_io_type_1"/>
      <state_interface name="analog_io_type_2"/>
      <state_interface name="analog_io_type_3"/>
      <state_interface name="tool_mode"/>
      <state_interface name="tool_output_voltage"/>
      <state_interface name="tool_output_current"/>
      <state_interface name="tool_temperature"/>
      <state_interface name="tool_analog_input_0"/>
      <state_interface name="tool_analog_input_1"/>
      <state_interface name="tool_analog_input_type_0"/>
      <state_interface name="tool_analog_input_type_1"/>
      <state_interface name="robot_mode"/>
      <state_interface name="robot_status_bit_0"/>
      <state_interface name="robot_status_bit_1"/>
      <state_interface name="robot_status_bit_2"/>
      <state_interface name="robot_status_bit_3"/>
      <state_interface name="safety_mode"/>
      <state_interface name="safety_status_bit_0"/>
      <state_interface name="safety_status_bit_1"/>
      <state_interface name="safety_status_bit_2"/>
      <state_interface name="safety_status_bit_3"/>
      <state_interface name="safety_status_bit_4"/>
      <state_interface name="safety_status_bit_5"/>
      <state_interface name="safety_status_bit_6"/>
      <state_interface name="safety_status_bit_7"/>
      <state_interface name="safety_status_bit_8"/>
      <state_interface name="safety_status_bit_9"/>
      <state_interface name="safety_status_bit_10"/>
      <state_interface name="program_running"/>
    </gpio>
    <gpio name="payload">
      <command_interface name="mass"/>
      <command_interface name="cog.x"/>
      <command_interface name="cog.y"/>
      <command_interface name="cog.z"/>
      <command_interface name="payload_async_success"/>
    </gpio>
    <gpio name="resend_robot_program">
      <command_interface name="resend_robot_program_cmd"/>
      <command_interface name="resend_robot_program_async_success"/>
    </gpio>
    <gpio name="hand_back_control">
      <command_interface name="hand_back_control_cmd"/>
      <command_interface name="hand_back_control_async_success"/>
    </gpio>
    <gpio name="zero_ftsensor">
      <command_interface name="zero_ftsensor_cmd"/>
      <command_interface name="zero_ftsensor_async_success"/>
    </gpio>
    <gpio name="system_interface">
      <state_interface name="initialized"/>
    </gpio>
  </ros2_control>
  <!-- Add URDF transmission elements (for ros_control) -->
  <!--<xacro:ur_arm_transmission prefix="${prefix}" hw_interface="${transmission_hw_interface}" />-->
  <!-- Placeholder for ros2_control transmission which don't yet exist -->
  <!-- links -  main serial chain -->
  <link name="base_link"/>
  <link name="base_link_inertia">
    <visual>
      <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/visual/base.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/collision/base.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="4.0"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.00443333156" ixy="0.0" ixz="0.0" iyy="0.00443333156" iyz="0.0" izz="0.0072"/>
    </inertial>
  </link>
  <link name="shoulder_link">
    <visual>
      <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/visual/shoulder.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/collision/shoulder.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="3.7"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.010267495893" ixy="0.0" ixz="0.0" iyy="0.010267495893" iyz="0.0" izz="0.00666"/>
    </inertial>
  </link>
  <link name="upper_arm_link">
    <visual>
      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.138"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/visual/upperarm.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.138"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/collision/upperarm.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="8.393"/>
      <origin rpy="0 1.5707963267948966 0" xyz="-0.2125 0.0 0.138"/>
      <inertia ixx="0.1338857818623325" ixy="0.0" ixz="0.0" iyy="0.1338857818623325" iyz="0.0" izz="0.0151074"/>
    </inertial>
  </link>
  <link name="forearm_link">
    <visual>
      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.007"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/visual/forearm.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.007"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/collision/forearm.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="2.275"/>
      <origin rpy="0 1.5707963267948966 0" xyz="-0.1961 0.0 0.007"/>
      <inertia ixx="0.031209355099586295" ixy="0.0" ixz="0.0" iyy="0.031209355099586295" iyz="0.0" izz="0.004095"/>
    </inertial>
  </link>
  <link name="wrist_1_link">
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.127"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/visual/wrist1.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.127"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/collision/wrist1.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1.219"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0025598989760400002" ixy="0.0" ixz="0.0" iyy="0.0025598989760400002" iyz="0.0" izz="0.0021942"/>
    </inertial>
  </link>
  <link name="wrist_2_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 -0.0997"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/visual/wrist2.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 -0.0997"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/collision/wrist2.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1.219"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0025598989760400002" ixy="0.0" ixz="0.0" iyy="0.0025598989760400002" iyz="0.0" izz="0.0021942"/>
    </inertial>
  </link>
  <link name="wrist_3_link">
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.0989"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/visual/wrist3.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.0989"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5e/collision/wrist3.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1879"/>
      <origin rpy="0 0 0" xyz="0.0 0.0 -0.0229"/>
      <inertia ixx="9.890410052167731e-05" ixy="0.0" ixz="0.0" iyy="9.890410052167731e-05" iyz="0.0" izz="0.0001321171875"/>
    </inertial>
  </link>
  <!-- base_joint fixes base_link to the environment -->
  <joint name="base_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="robot_base_link"/>
    <child link="base_link"/>
  </joint>
  <!-- joints - main serial chain -->
  <joint name="base_link-base_link_inertia" type="fixed">
    <parent link="base_link"/>
    <child link="base_link_inertia"/>
    <!-- 'base_link' is REP-103 aligned (so X+ forward), while the internal
           frames of the robot/controller have X+ pointing backwards.
           Use the joint between 'base_link' and 'base_link_inertia' (a dummy
           link/frame) to introduce the necessary rotation over Z (of pi rad).
      -->
    <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
  </joint>
  <joint name="shoulder_pan_joint" type="revolute">
    <parent link="base_link_inertia"/>
    <child link="shoulder_link"/>
    <origin rpy="0 0 0" xyz="0 0 0.1625"/>
    <axis xyz="0 0 1"/>
    <limit effort="150.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="shoulder_lift_joint" type="revolute">
    <parent link="shoulder_link"/>
    <child link="upper_arm_link"/>
    <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="150.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="elbow_joint" type="revolute">
    <parent link="upper_arm_link"/>
    <child link="forearm_link"/>
    <origin rpy="0 0 0" xyz="-0.425 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="150.0" lower="-3.141592653589793" upper="3.141592653589793" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="wrist_1_joint" type="revolute">
    <parent link="forearm_link"/>
    <child link="wrist_1_link"/>
    <origin rpy="0 0 0" xyz="-0.3922 0 0.1333"/>
    <axis xyz="0 0 1"/>
    <limit effort="28.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="wrist_2_joint" type="revolute">
    <parent link="wrist_1_link"/>
    <child link="wrist_2_link"/>
    <origin rpy="1.570796327 0 0" xyz="0 -0.0997 -2.044881182297852e-11"/>
    <axis xyz="0 0 1"/>
    <limit effort="28.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="wrist_3_joint" type="revolute">
    <parent link="wrist_2_link"/>
    <child link="wrist_3_link"/>
    <origin rpy="1.570796326589793 3.141592653589793 3.141592653589793" xyz="0 0.0996 -2.042830148012698e-11"/>
    <axis xyz="0 0 1"/>
    <limit effort="28.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <link name="ft_frame"/>
  <joint name="wrist_3_link-ft_frame" type="fixed">
    <parent link="wrist_3_link"/>
    <child link="ft_frame"/>
    <origin rpy="3.141592653589793 0 0" xyz="0 0 0"/>
  </joint>
  <!-- ROS-Industrial 'base' frame - base_link to UR 'Base' Coordinates transform -->
  <link name="base"/>
  <joint name="base_link-base_fixed_joint" type="fixed">
    <!-- Note the rotation over Z of pi radians - as base_link is REP-103
           aligned (i.e., has X+ forward, Y+ left and Z+ up), this is needed
           to correctly align 'base' with the 'Base' coordinate system of
           the UR controller.
      -->
    <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="base"/>
  </joint>
  <!-- ROS-Industrial 'flange' frame - attachment point for EEF models -->
  <link name="flange"/>
  <joint name="wrist_3-flange" type="fixed">
    <parent link="wrist_3_link"/>
    <child link="flange"/>
    <origin rpy="0 -1.5707963267948966 -1.5707963267948966" xyz="0 0 0"/>
  </joint>
  <!-- ROS-Industrial 'tool0' frame - all-zeros tool frame -->
  <link name="tool0"/>
  <joint name="flange-tool0" type="fixed">
    <!-- default toolframe - X+ left, Y+ up, Z+ front -->
    <origin rpy="1.5707963267948966 0 1.5707963267948966" xyz="0 0 0"/>
    <parent link="flange"/>
    <child link="tool0"/>
  </joint>
  <material name="LightGrey">
    <color rgba="0.7 0.7 0.7 1.0"/>
  </material>
  <material name="blue">
    <color rgba="0 0 0.8 1"/>
  </material>
  <material name="red">
    <color rgba="0.8 0 0 1"/>
  </material>
  <link name="baseplate_link">
    <visual>
      <origin xyz="0 0 0.0"/>
      <geometry>
        <box size="0.7 1.1 0.03"/>
      </geometry>
      <material name="LightGrey"/>
    </visual>
    <inertial>
      <mass value="10"/>
      <inertia ixx="0.4090833333333333" ixy="0" ixz="0" iyy="1.0090833333333336" iyz="0" izz="1.0090833333333336"/>
    </inertial>
  </link>
  <joint name="baseplate_joint" type="fixed">
    <origin xyz="0 0 0"/>
    <parent link="world"/>
    <child link="baseplate_link"/>
  </joint>
  <link name="mountingplate_link">
    <visual>
      <origin xyz="0 0 0.0"/>
      <geometry>
        <box size="0.3 0.3 0.012"/>
      </geometry>
      <material name="red"/>
    </visual>
    <inertial>
      <mass value="1"/>
      <inertia ixx="0.0075120000000000004" ixy="0" ixz="0" iyy="0.0075120000000000004" iyz="0" izz="0.0075120000000000004"/>
    </inertial>
  </link>
  <joint name="mountingplate_joint" type="fixed">
    <origin xyz="-0.2 0.0 0.021"/>
    <parent link="baseplate_link"/>
    <child link="mountingplate_link"/>
  </joint>
  <link name="robot_base_link"/>
  <!-- robot to mounting_plate. -->
  <joint name="mountingplate_link" type="fixed">
    <parent link="mountingplate_link"/>
    <child link="robot_base_link"/>
    <origin rpy="0.0 0.0 3.141592653589793" xyz="0.0 0.0 0.01"/>
  </joint>
  <link name="beugel_link"/>
  <joint name="beugel_link_to_beugel_link_mesh" type="fixed">
    <parent link="beugel_link"/>
    <child link="beugel_link_mesh"/>
    <origin rpy="1.5707963267948966 0 3.141592653589793" xyz="0.0 0.00 0.01"/>
  </joint>
  <link name="beugel_link_mesh">
    <inertial>
      <origin rpy="0 0 0" xyz="5.3816E-10 -0.009384 0.0069302"/>
      <mass value="0.02897"/>
      <inertia ixx="1.9588E-05" ixy="-1.0828E-13" ixz="2.4666E-14" iyy="3.1685E-05" iyz="-3.26680000000001E-07" izz="1.261E-05"/>
    </inertial>
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://pick_robot_description/urdf/beugel/meshes/Beugel.SLDPRT.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.79216 0.81961 0.93333 1"/>
        <!--
        <texture
          filename="package://pick_robot_description/urdf/beugel/textures/" />
        -->
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://pick_robot_description/urdf/beugel/meshes/Beugel.SLDPRT.STL"/>
      </geometry>
    </collision>
  </link>
  <link name="beugel_tool"/>
  <joint name="beugel_link_to_beugel_tool" type="fixed">
    <parent link="beugel_link"/>
    <child link="beugel_tool"/>
    <origin rpy="0 0 0" xyz="0.0 0.00 0.005"/>
  </joint>
  <link name="beugel_camera_pre"/>
  <joint name="beugel_link_to_beugel_camera_pre" type="fixed">
    <parent link="beugel_link"/>
    <child link="beugel_camera_pre"/>
    <origin rpy="-0.5235987755982988 0 0" xyz="0.00 0.04634 0.00246"/>
  </joint>
  <link name="beugel_camera"/>
  <joint name="beugel_camera_pre_to_beugel_camera" type="fixed">
    <parent link="beugel_camera_pre"/>
    <child link="beugel_camera"/>
    <origin rpy="0 -1.5707963267948966 1.5707963267948966" xyz="0.00 0 0.033"/>
  </joint>
  <!-- tool0 to beugel_base_position -->
  <!-- cahnge these valuse to place the beugel on the right position -->
  <joint name="beugel_base_position_to_tool0" type="fixed">
    <parent link="tool0"/>
    <child link="beugel_link"/>
    <origin rpy="0 0 0" xyz="0.0 0.00 0.0"/>
  </joint>
  <!-- base_link of the sensor-->
  <link name="oak-d_frame"/>
  <joint name="oak_center_joint" type="fixed">
    <parent link="beugel_camera"/>
    <child link="oak-d_frame"/>
    <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
  </joint>
  <!-- device Center -->
  <link name="oak_model_origin">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://depthai_descriptions/urdf/models/OAK-D.stl"/>
      </geometry>
      <material name="mat">
        <color rgba="0.8 0.8 0.8 0.8"/>
      </material>
    </visual>
  </link>
  <joint name="oak_model_origin_joint" type="fixed">
    <parent link="oak-d_frame"/>
    <child link="oak_model_origin"/>
    <origin rpy="1.5708 0 1.5708" xyz="0 0 0"/>
  </joint>
  <!-- IMU -->
  <link name="oak_imu_frame"/>
  <joint name="oak_imu_joint" type="fixed">
    <parent link="oak-d_frame"/>
    <child link="oak_imu_frame"/>
    <origin rpy="0.0 1.5707963267948966 0.0" xyz="0.0 -0.015 -0.013662"/>
  </joint>
  <!-- RGB Camera -->
  <link name="oak_rgb_camera_frame"/>
  <joint name="oak_rgb_camera_joint" type="fixed">
    <parent link="oak-d_frame"/>
    <child link="oak_rgb_camera_frame"/>
    <origin rpy="0 0 0" xyz="0 0 0"/>
  </joint>
  <link name="oak_rgb_camera_optical_frame"/>
  <joint name="oak_rgb_camera_optical_joint" type="fixed">
    <origin rpy="-1.5707963267948966 0.0 -1.5707963267948966" xyz="0 0 0"/>
    <parent link="oak_rgb_camera_frame"/>
    <child link="oak_rgb_camera_optical_frame"/>
  </joint>
  <!-- Left Camera -->
  <link name="oak_left_camera_frame"/>
  <joint name="oak_left_camera_joint" type="fixed">
    <parent link="oak-d_frame"/>
    <child link="oak_left_camera_frame"/>
    <origin rpy="0 0 0" xyz="0 0.0375 0"/>
  </joint>
  <link name="oak_left_camera_optical_frame"/>
  <joint name="oak_left_camera_optical_joint" type="fixed">
    <origin rpy="-1.5707963267948966 0.0 -1.5707963267948966" xyz="0 0 0"/>
    <parent link="oak_left_camera_frame"/>
    <child link="oak_left_camera_optical_frame"/>
  </joint>
  <!-- right Camera -->
  <link name="oak_right_camera_frame"/>
  <joint name="oak_right_camera_joint" type="fixed">
    <parent link="oak-d_frame"/>
    <child link="oak_right_camera_frame"/>
    <origin rpy="0 0 0" xyz="0 -0.0375 0"/>
  </joint>
  <link name="oak_right_camera_optical_frame"/>
  <joint name="oak_right_camera_optical_joint" type="fixed">
    <origin rpy="-1.5707963267948966 0.0 -1.5707963267948966" xyz="0 0 0"/>
    <parent link="oak_right_camera_frame"/>
    <child link="oak_right_camera_optical_frame"/>
  </joint>
  <!--
    <xacro:include filename="$(find depthai_descriptions)/urdf/include/depthai_macro.urdf.xacro"/>

    <xacro:depthai_camera camera_name = "oak" parent = "beugel_camera" camera_model = "OAD-D" base_frame = "oak-d_frame" cam_pos_x = "0" cam_pos_y = "0" cam_pos_z = "0" cam_roll = "0" cam_pitch = "0" cam_yaw = "0"/>
-->
  <ros2_control name="epick_driver_ros2_control" type="system">
    <hardware>
      <plugin>epick_driver/EpickGripperHardwareInterface</plugin>
      <!-- Serial connection parameters ////////////////////////////////// -->
      <param name="usb_port">/dev/ttyUSB0</param>
      <param name="baud_rate">115200</param>
      <param name="timeout">0.2</param>
      <!-- Gripper parameters /////////////////////////////////////////// -->
      <!-- Set use_dummy to true to connect to a dummy driver for testing purposes. -->
      <param name="use_dummy">False</param>
      <!-- The address of the gripper. -->
      <param name="slave_address">0x9</param>
      <!-- The gripper operation mode: AutomaticMode or AdvancedMode. -->
      <param name="mode">AdvancedMode</param>
      <!-- The following parameters are only required for the AdvancedMode. -->
      <param name="grip_max_vacuum_pressure">-60</param>
      <param name="grip_min_vacuum_pressure">-10</param>
      <param name="grip_timeout">25.0</param>
      <param name="release_timeout">2.0</param>
    </hardware>
    <gpio name="gripper">
      <!--
          Command interface to control the gripper:
          1.0 = grip
          0.0 = release
        -->
      <command_interface name="grip_cmd"/>
      <!--
          State interface that follows the value of the gripper/grip_cmd
          command interface:
          1.0 = successful grip
          0.0 = successful release
        -->
      <state_interface name="grip_cmd"/>
      <!--
          Return the object detection status:
          0.0 = unknown
          1.0 = object detected at minimum pressure
          2.0 = object detected at maximum pressure
          3.0 = no object detected
        -->
      <state_interface name="object_detection_status"/>
    </gpio>
    <!--
        This is optional configuration if you want to publish the state of the
        gripper as a joint state interface.
      -->
    <joint name="gripper">
      <!--
          State interface that follows the value of the gripper/grip_cmd
          command interface:
          1.0 = successful grip
          0.0 = successful release
        -->
      <state_interface name="position"/>
    </joint>
  </ros2_control>
  <!-- Base Link -->
  <link name="epick_base_link"/>
  <joint name="world_to_epick_base_link" type="fixed">
    <parent link="world"/>
    <child link="epick_base_link"/>
    <origin rpy="0 0 0" xyz="0 0 0"/>
  </joint>
  <!-- EPick Body -->
  <link name="epick_body">
    <visual>
      <!-- Shifted backwards since the mesh origin is at the base end -->
      <origin rpy="0 0 0" xyz="0 0 -0.05115"/>
      <geometry>
        <mesh filename="package://epick_description/meshes/visual/epick_body.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="epick_gray">
        <color rgba="0.25 0.25 0.25 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.1023" radius="0.044"/>
      </geometry>
    </collision>
  </link>
  <joint name="epick_base_link_to_epick_body" type="fixed">
    <parent link="epick_base_link"/>
    <child link="epick_body"/>
    <origin rpy="0 0 0" xyz="0 0 0.05115"/>
  </joint>
  <link name="epick_suction_cup">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.015" radius="0.012"/>
      </geometry>
      <material name="">
        <color rgba="0.25 0.25 0.25 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.015" radius="0.012"/>
      </geometry>
    </collision>
  </link>
  <joint name="epick_body_to_epick_suction_cup" type="fixed">
    <parent link="epick_body"/>
    <child link="epick_suction_cup"/>
    <origin rpy="0 0 0" xyz="0 0 0.05865"/>
  </joint>
  <!-- TIP Frame -->
  <!-- represents the outmost point of the collision geometry -->
  <link name="epick_tip"/>
  <joint name="epick_suction_cup_to_epick_tip" type="fixed">
    <parent link="epick_suction_cup"/>
    <child link="epick_tip"/>
    <origin rpy="0 0 0" xyz="0 0 0.0075"/>
  </joint>
  <!-- TCP Frame -->
  <!-- contact point to use for IK, Z-axis points "forwards", recessed by tcp_stroke_compensation -->
  <link name="epick_tcp"/>
  <joint name="epick_tip_to_epick_tcp" type="fixed">
    <parent link="epick_tip"/>
    <child link="epick_tcp"/>
    <origin rpy="0 0 0" xyz="0 0 -0.0"/>
  </joint>
  <!-- To allow MoveIt to actuate the gripper as part of a trajectory, we need to include a fake "joint" in the URDF corresponding to the Epick's vacuum state. -->
  <link name="epick_vacuum_state"/>
  <joint name="gripper" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="epick_tcp"/>
    <child link="epick_vacuum_state"/>
    <limit effort="30" lower="0.0" upper="1.0" velocity="1.0"/>
  </joint>
</robot>
